{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\reactProje\\\\react\\\\my-movies\\\\src\\\\components\\\\App.js\";\nimport React from \"react\";\nimport SearchBar from './SearchBar';\nimport MovieList from './MovieList';\nimport AddMovie from \"./AddMovie\";\nimport EditMovie from \"./EditMovie\";\nimport axios from \"axios\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n//class base component filmlerin sayısı değişken olacagı ıcın bılgıler state ıcıne gomulur bu yuzden class base kullanıyoruz\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      movies: [],\n      searchQuery: \"\"\n    };\n    //app.js parent comp.dan movielist child comp.a propslarla delete işlemi tasınır\n    //film silme işlemi için fonksiyon stateteki listeyi al yine ama silinenin id siyle aynı olmayanları\n    //anlamına geliyor\n    /*deleteMovie = (movie)=>{\r\n        const newMovieList=this.state.movies.filter(\r\n            m => m.id !== movie.id\r\n        );\r\n          //elimizde ilk durumda film bilgisi olmasaydı bu şablon kullanılırdı \r\n        //this.setState({\r\n        //    movies : newMovieList\r\n        //})\r\n          //elimizde film bilgisi oldugu ıcın bu sekılde yazıyoruz\r\n        this.setState(state =>({\r\n            movies: newMovieList\r\n        }))\r\n    }*/\n    //fetch api kullanarak\n    /*deleteMovie = async(movie)=>{\r\n       const baseURL=`http://localhost:3002/movies/${movie.id}`\r\n       await fetch(baseURL,{\r\n            method: \"DELETE\"\r\n       })\r\n       const newMovieList=this.state.movies.filter(\r\n            m=> m.id !== movie.id\r\n       );\r\n       this.setState(state=>({\r\n            movies: newMovieList\r\n       }))\r\n      }*/\n    //axios kullanarak \n    //` işaretini altgr+virgül ile iki kere basarak yap\n    //DELETE MOVIE\n    this.deleteMovie = async movie => {\n      axios.delete(`http://localhost:3002/movies/${movie.id}`);\n      const newMovieList = this.state.movies.filter(m => m.id !== movie.id);\n      this.setState(state => ({\n        movies: newMovieList\n      }));\n    };\n    // ADD MOVIE\n    this.addMovie = async movie => {\n      await axios.post(`http://localhost:3002/movies/`, movie);\n      this.setState(state => ({\n        movies: state.movies.concat([movie])\n      }));\n    };\n    //arama input una her yazı yazıldıgında searchQuery i o yazılanla update ediyoruz\n    //SEARCH MOVIE\n    this.searchMovie = event => {\n      //console.log(event.target.value)\n      this.setState({\n        searchQuery: event.target.value\n      });\n    };\n  }\n  //fetch api kullanarak\n  //async componentDidMount(){\n  //    const baseURL=\"http://localhost:3002/movies\";\n  //    const response= await fetch(baseURL); //async fonk.promise döner\n  //    const data = await response.json();\n  //    this.setState({movies:data})  \n  //}\n\n  //axios kullanarak\n  async componentDidMount() {\n    const response = await axios.get(\"http://localhost:3002/movies\");\n    console.log(response);\n    this.setState({\n      movies: response.data\n    });\n  }\n  render() {\n    //indexof ile yazılan kelimeyi filmlerin name kısmı ıcınde arıyor bulamazsa indexof -1 döner o yuzden\n    //-1 dönmediklerini yanı bulduklarını döndür diyoruz\n    //hepsini küçük harf olarak algılayıp kıyaslaması ıcın toLowerCase kullandık\n    let filteredMovies = this.state.movies.filter(movie => {\n      return movie.name.toLowerCase().indexOf(this.state.searchQuery.toLowerCase()) !== -1;\n    }).sort((a, b) => {\n      return a.id < b.id ? 1 : a.id > b.id ? -1 : 0;\n    }); //en yeni filmi en başta görmek için 1 b yi al demek yani buyugu -1 de a yı al demek yanı buyugu eşitse de 0\n\n    return /*#__PURE__*/_jsxDEV(Router, {\n      children: /*#__PURE__*/_jsxDEV(Routes, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"col-lg-12\",\n                  children: /*#__PURE__*/_jsxDEV(SearchBar, {\n                    searchMovieProp: this.searchMovie\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 119,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(MovieList, {\n                movies: filteredMovies,\n                deleteMovieProp: this.deleteMovie\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"add\",\n          element: /*#__PURE__*/_jsxDEV(AddMovie, {\n            onAddMovie: movie => {\n              this.addMovie(movie);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"add\",\n          component: EditMovie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n//functional component\n//const App=()=>{\n//    return (\n//        <h1>My Movies</h1>\n//    )\n//}\nexport default App;","map":{"version":3,"names":["React","SearchBar","MovieList","AddMovie","EditMovie","axios","BrowserRouter","Router","Route","Routes","jsxDEV","_jsxDEV","App","Component","constructor","args","state","movies","searchQuery","deleteMovie","movie","delete","id","newMovieList","filter","m","setState","addMovie","post","concat","searchMovie","event","target","value","componentDidMount","response","get","console","log","data","render","filteredMovies","name","toLowerCase","indexOf","sort","a","b","children","path","element","Fragment","className","searchMovieProp","fileName","_jsxFileName","lineNumber","columnNumber","deleteMovieProp","onAddMovie","component"],"sources":["C:/Users/pc/Desktop/reactProje/react/my-movies/src/components/App.js"],"sourcesContent":["import React from \"react\";\r\nimport SearchBar from './SearchBar';\r\nimport MovieList from './MovieList';\r\nimport AddMovie from \"./AddMovie\";\r\nimport EditMovie from \"./EditMovie\";\r\nimport axios from \"axios\";\r\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\r\n//class base component filmlerin sayısı değişken olacagı ıcın bılgıler state ıcıne gomulur bu yuzden class base kullanıyoruz\r\nclass App extends React.Component{\r\n\r\n    state={\r\n            movies : [\r\n                \r\n            ],\r\n\r\n            searchQuery: \"\"\r\n    }\r\n\r\n    //fetch api kullanarak\r\n    //async componentDidMount(){\r\n    //    const baseURL=\"http://localhost:3002/movies\";\r\n    //    const response= await fetch(baseURL); //async fonk.promise döner\r\n    //    const data = await response.json();\r\n    //    this.setState({movies:data})  \r\n    //}\r\n\r\n    //axios kullanarak\r\n    async componentDidMount(){\r\n        const response=await axios.get(\"http://localhost:3002/movies\");\r\n        console.log(response);\r\n        this.setState({movies: response.data});\r\n    }\r\n\r\n    //app.js parent comp.dan movielist child comp.a propslarla delete işlemi tasınır\r\n    //film silme işlemi için fonksiyon stateteki listeyi al yine ama silinenin id siyle aynı olmayanları\r\n    //anlamına geliyor\r\n    /*deleteMovie = (movie)=>{\r\n        const newMovieList=this.state.movies.filter(\r\n            m => m.id !== movie.id\r\n        );\r\n\r\n        //elimizde ilk durumda film bilgisi olmasaydı bu şablon kullanılırdı \r\n        //this.setState({\r\n        //    movies : newMovieList\r\n        //})\r\n\r\n        //elimizde film bilgisi oldugu ıcın bu sekılde yazıyoruz\r\n        this.setState(state =>({\r\n            movies: newMovieList\r\n        }))\r\n    }*/\r\n\r\n    //fetch api kullanarak\r\n    /*deleteMovie = async(movie)=>{\r\n       const baseURL=`http://localhost:3002/movies/${movie.id}`\r\n       await fetch(baseURL,{\r\n            method: \"DELETE\"\r\n       })\r\n       const newMovieList=this.state.movies.filter(\r\n            m=> m.id !== movie.id\r\n       );\r\n       this.setState(state=>({\r\n            movies: newMovieList\r\n       }))\r\n\r\n    }*/\r\n\r\n    //axios kullanarak \r\n    //` işaretini altgr+virgül ile iki kere basarak yap\r\n    //DELETE MOVIE\r\n    deleteMovie = async(movie)=>{\r\n        axios.delete(`http://localhost:3002/movies/${movie.id}`)\r\n        const newMovieList=this.state.movies.filter(\r\n             m=> m.id !== movie.id\r\n        );\r\n        this.setState(state=>({\r\n             movies: newMovieList\r\n        }))\r\n     }\r\n\r\n     // ADD MOVIE\r\n    addMovie = async (movie) => {\r\n        await axios.post(`http://localhost:3002/movies/`, movie)\r\n        this.setState( state => ( {\r\n            movies:state.movies.concat([movie])\r\n        }))\r\n    }\r\n    \r\n    //arama input una her yazı yazıldıgında searchQuery i o yazılanla update ediyoruz\r\n    //SEARCH MOVIE\r\n    searchMovie=(event)=>{\r\n        //console.log(event.target.value)\r\n        this.setState({searchQuery: event.target.value})\r\n    }\r\n\r\n    render(){\r\n\r\n        //indexof ile yazılan kelimeyi filmlerin name kısmı ıcınde arıyor bulamazsa indexof -1 döner o yuzden\r\n        //-1 dönmediklerini yanı bulduklarını döndür diyoruz\r\n        //hepsini küçük harf olarak algılayıp kıyaslaması ıcın toLowerCase kullandık\r\n        let filteredMovies = this.state.movies.filter(\r\n            (movie)=>{\r\n                \r\n                return movie.name.toLowerCase().indexOf(this.state.searchQuery.toLowerCase()) !== -1\r\n            }\r\n        ).sort((a,b)=>{\r\n            return a.id < b.id ? 1 : a.id > b.id ? -1 : 0;\r\n        }); //en yeni filmi en başta görmek için 1 b yi al demek yani buyugu -1 de a yı al demek yanı buyugu eşitse de 0\r\n\r\n        return (\r\n            <Router>\r\n                \r\n                <Routes>\r\n                <Route path=\"/\" element={\r\n                  <React.Fragment>\r\n                  <div className=\"container\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-12\">\r\n                        <SearchBar searchMovieProp={this.searchMovie} />\r\n                      </div>\r\n                    </div>\r\n                    <MovieList\r\n                      movies={filteredMovies}\r\n                      deleteMovieProp={this.deleteMovie}\r\n                    />\r\n                    </div>\r\n                    </React.Fragment>\r\n                }> \r\n                </Route>\r\n                <Route path=\"add\" element={\r\n                    <AddMovie \r\n                        onAddMovie = {(movie) => {this.addMovie(movie)}}\r\n                    />\r\n                }>\r\n                </Route>\r\n\r\n                <Route path=\"add\" component={EditMovie} />\r\n                \r\n                </Routes>\r\n            </Router>\r\n          );\r\n\r\n    }\r\n}\r\n\r\n//functional component\r\n//const App=()=>{\r\n//    return (\r\n//        <h1>My Movies</h1>\r\n//    )\r\n//}\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}